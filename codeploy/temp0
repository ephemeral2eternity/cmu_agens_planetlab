#!/usr/bin/perl -w
require 5.002;
use strict;
use sigtrap;
use Socket;

#######################################################################
sub getbigfileserv 
{
    # return which node to contact for getbig
    # first, try to resolve "codeploy.codeen.org" and if it fails
    # it asks its local codemon (current port is 23126)
    my ($paddr, $server) = ("", "");  

    $server = gethostbyname("codeploy.codeen.org");
    return inet_ntoa($server) unless ($server eq "");

    socket(SOCK_COD, PF_INET, SOCK_STREAM, getprotobyname('tcp')) or 
	do { print STDERR "socket creation failed\n"; return "";};

    $paddr = sockaddr_in(23126, inet_aton("127.0.0.1"));
    connect(SOCK_COD, $paddr) or
	do { print STDERR "connection failed\n"; close(SOCK_COD); return "";};

    if (defined(recv(SOCK_COD, $server, 512, 0))) { 
	chomp($server);
    }   
    close(SOCK_COD);

    return $server;
}

#######################################################################
sub connect_to_getbig
{
    my $server = shift;      # ip address of a getbig server
    my $paddr;

    # connect to the server
    socket(SOCK_GB, PF_INET, SOCK_STREAM, getprotobyname('tcp')) or 
    do { print STDERR "socket creation failed\n"; return -1;};

    $paddr = sockaddr_in(3125, inet_aton($server));	
    connect(SOCK_GB, $paddr) or
    do { print STDERR "connection failed\n"; close(SOCK_GB); return -1; };

    return 0;
}

#######################################################################
sub download
{
    my $src = shift;
    my $dest = shift;
    my $md5sum = shift;
    my $use_origin = shift;
    my ($size, $paddr, $host, $request, $buffer), 
    my ($length, $count, $sock, $http_ver, $in_header);

    # find the host string
    if ($src =~ /http:\/\/([^\/:]+)/) {
	$host = $1;
    } else {
	print STDERR "$src : wrong format of URL\n";
	return -2;
    }

    # see if we need to contact the origin server
    if ($use_origin) {
	my $iaddr = gethostbyname($host);

	# connect to the origin server
	socket(SOCK_ORI, PF_INET, SOCK_STREAM, getprotobyname('tcp')) or 
        do { print STDERR "socket creation failed\n"; return -2;};
	
	$paddr = sockaddr_in(80, $iaddr);
	connect(SOCK_ORI, $paddr) or
        do { print STDERR "connection failed\n"; close(SOCK_ORI); return -2;};

	$http_ver = "HTTP/1.0";
	$sock = *SOCK_ORI;
    } else {
	$http_ver = "HTTP/1.1\r\nConnection: Keep-Alive";
	$sock = *SOCK_GB;
    }

    # build a request
    $request = sprintf ("%s%s%s%s", 
			 "GET $src $http_ver\r\n",
			 "Host: $host\r\n",
			 "md5sum: $md5sum\r\n",
			 "connection: keep-alive\r\n\r\n");

    # send a request
    send($sock, $request, 0) or
    do { print STDERR "send failed\n"; return ($use_origin) ? -2 : -1;};

    # open a file for the contents
    open(H_FILE, ">$dest") or 
    do { print STDERR "file opening failed\n"; return -2;};

    # receiving the contents
    ($length, $count, $in_header) = (-1, 0, 1);
    while (defined(recv($sock, $buffer, 32768, 0))) {
	
	# size : bytes received
	if (($size = length($buffer)) == 0) { 
            # connection is closed ?
	    close(H_FILE);
	    return -1;
	}

        # still getting headers ?
	if ($in_header) {   

	    # looking for content-length
	    if ($length == -1 &&
		$buffer =~ /content-length:(.+)\r\n/im) {
		$length = ($1 + 0);
	    }

	    # looking for the end of the header
	    if ($buffer =~ /\r\n\r\n/m) {
		$in_header = 0;
		print H_FILE $';
		$count += length($');
	    } 
	} else {
	    # now, we're getting the body
	    print H_FILE $buffer;
	    $count += $size;
	}

	# if we've got everything, then break out
	last if ($length >= 0 && $count >= $length);
    }

    # close the file
    close(H_FILE);

    # close the connection if it's to the original server
    close(SOCK_ORI) if ($use_origin);

    return 0;
}

#######################################################################
sub need_update
{
    # see if we need to update this file
    my $file = shift;
    my $md5sum = shift;
    my $chksum;

    # if the file is absent, it needs to be updated
    return 1 unless (-e $file);

    # now, the file exists => check md5sum
    chomp($chksum = `md5sum $file`);
    if ($chksum =~ /([^ ]+)\s*([^ ]+)/) { 
	return 0 if ($md5sum eq $1);
    }
    return 1;
}

#######################################################################
sub die_with_error
{
    # die with an error message
    my $msg = shift;

    unlink "./$0";     # delete this script
    die $msg;
}

#########################################################################
# main module in the script
#########################################################################
my ($file, $dir, $origfile, $cwd, $host, $sock);
my %chksumHash = ("./phonehome.py" => [0664, "7ed3f01b29ec93bfea7789bb82a2ed9d", ""], 
	"./phonehome.php" => [0664, "ee68c45083907389c70490c850e0ff05", ""], 
	"./phonelog.php" => [0664, "54d5f9767bfd2f5a9950fb220f5308eb", ""], 
	"./phonelog.txt" => [0666, "d41d8cd98f00b204e9800998ecf8427e", ""]);
my @alldirs = (".");
my $updateNum = 0;
my $server = "";

# learn my host name 
chomp($host = `hostname`);

# get the current working directory
$cwd = $ENV{PWD};
chmop($cwd = `pwd`) if (!defined($cwd));

# create the target directory if it doesn't exist
system("mkdir -p hello") unless (-d "hello");
(-d "hello") or die_with_error("$host : couldn't create hello!\n");

# change directory to the target directory
chdir "hello";

# first, copy the directory hierarchy
foreach $dir (@alldirs) { 
    system("mkdir -p $dir") unless (-d $dir);
}

# second, update necessary files
foreach $file (keys %chksumHash) {
    my ($hash, $retry, $res) = ($chksumHash{$file}[1], 0, 0);

    # know the original file in case it's in the temp directory
    $origfile = $chksumHash{$file}[2];
    $origfile = $file if ($origfile eq "");

    # update the file by using bigfile service by CoDeeN
    while (need_update($origfile, $hash)) {

	# warning for retry
	if ($retry > 0) {
	    print STDERR "$host: $origfile -> ${retry}-th retry\n";
	}

	# get a getbig server & connect to it
	if ($server eq "") {
	    $server = getbigfileserv();
	    if ($server eq "") {
		die_with_error("$host : codemon is not running\n");
	    }
	    if (connect_to_getbig($server) < 0) {
		die_with_error("$host : can't connect to bigfile service\n");
	    }
	}

        # if it fails for three consecutive times, 
	# it directly goes to the origin server
	$res = download("http://146.148.66.148/helloworld/$file", $origfile, $hash, 
			 ($retry >= 3) ? 1 : 0);

        # see if we've got an error
	if ($res < 0) {
	    if ($res == -1) {
		# close this connection. reconnect to another next time
		close(SOCK_GB);
		$server = "";
	    } elsif ($res == -2) {
		print STDERR "$host: error occurred, skipping $origfile\n";
		last;
	    }
	} elsif ($retry >= 10) {
	    print STDERR "too many failures, skipping $origfile\n";
	    last;
	}
	
	# change the file permission
	chmod $chksumHash{$file}[0], $origfile;
	$updateNum++ if ($retry == 0);
	$retry++;
    }
}
# close the connection
close(SOCK_GB) if ($server);

# print out how many files got updated
print STDERR "$host finished ($updateNum files updated)\n";

# now everything is done, 
# we go back to the previous directory => necessary ?
chdir $cwd;

# delete myself
unlink "$cwd/$0";
